// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
public class LobbyEventCallbacks
{
    public event System.Action<System.Collections.Generic.Dictionary<string, Unity.Services.Lobbies.ChangedOrRemovedLobbyValue<Unity.Services.Lobbies.Models.DataObject>>> DataAdded;
    public event System.Action<System.Collections.Generic.Dictionary<string, Unity.Services.Lobbies.ChangedOrRemovedLobbyValue<Unity.Services.Lobbies.Models.DataObject>>> DataChanged;
    public event System.Action<System.Collections.Generic.Dictionary<string, Unity.Services.Lobbies.ChangedOrRemovedLobbyValue<Unity.Services.Lobbies.Models.DataObject>>> DataRemoved;
    public event System.Action KickedFromLobby;
    public event System.Action<Unity.Services.Lobbies.ILobbyChanges> LobbyChanged;
    public event System.Action LobbyDeleted;
    public event System.Action<Unity.Services.Lobbies.LobbyEventConnectionState> LobbyEventConnectionStateChanged;
    public event System.Action<System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<string, Unity.Services.Lobbies.ChangedOrRemovedLobbyValue<Unity.Services.Lobbies.Models.PlayerDataObject>>>> PlayerDataAdded;
    public event System.Action<System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<string, Unity.Services.Lobbies.ChangedOrRemovedLobbyValue<Unity.Services.Lobbies.Models.PlayerDataObject>>>> PlayerDataChanged;
    public event System.Action<System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<string, Unity.Services.Lobbies.ChangedOrRemovedLobbyValue<Unity.Services.Lobbies.Models.PlayerDataObject>>>> PlayerDataRemoved;
    public event System.Action<System.Collections.Generic.List<Unity.Services.Lobbies.LobbyPlayerJoined>> PlayerJoined;
    public event System.Action<System.Collections.Generic.List<int>> PlayerLeft;
    public LobbyEventCallbacks() {}
}

namespace Unity.Services.Lobbies
{
    public struct ChangedLobbyValue<T>
    {
        public bool Added { get; }
        public bool Changed { get; }
        public T Value { get; }
        public ChangedLobbyValue(T value) {}
    }

    public struct ChangedOrRemovedLobbyValue<T>
    {
        public static readonly Unity.Services.Lobbies.ChangedOrRemovedLobbyValue<T> RemoveThisValue;
        public bool Added { get; }
        public bool Changed { get; }
        public LobbyValueChangeType ChangeType { get; }
        public bool Removed { get; }
        public T Value { get; }
        public ChangedOrRemovedLobbyValue(T value, LobbyValueChangeType status) {}
    }

    public class CreateLobbyOptions
    {
        public System.Collections.Generic.Dictionary<string, Models.DataObject> Data { get; set; }
        public System.Nullable<bool> IsLocked { get; set; }
        public System.Nullable<bool> IsPrivate { get; set; }
        public string Password { get; set; }
        public Models.Player Player { get; set; }
        public CreateLobbyOptions() {}
    }

    public interface ILobbyChanges
    {
        public Unity.Services.Lobbies.ChangedLobbyValue<int> AvailableSlots { get; }
        public Unity.Services.Lobbies.ChangedOrRemovedLobbyValue<System.Collections.Generic.Dictionary<string, Unity.Services.Lobbies.ChangedOrRemovedLobbyValue<Models.DataObject>>> Data { get; }
        public Unity.Services.Lobbies.ChangedLobbyValue<bool> HasPassword { get; }
        public Unity.Services.Lobbies.ChangedLobbyValue<string> HostId { get; }
        public Unity.Services.Lobbies.ChangedLobbyValue<bool> IsLocked { get; }
        public Unity.Services.Lobbies.ChangedLobbyValue<bool> IsPrivate { get; }
        public Unity.Services.Lobbies.ChangedLobbyValue<System.DateTime> LastUpdated { get; }
        public bool LobbyDeleted { get; }
        public Unity.Services.Lobbies.ChangedLobbyValue<int> MaxPlayers { get; }
        public Unity.Services.Lobbies.ChangedLobbyValue<string> Name { get; }
        public Unity.Services.Lobbies.ChangedLobbyValue<System.Collections.Generic.Dictionary<int, LobbyPlayerChanges>> PlayerData { get; }
        public Unity.Services.Lobbies.ChangedLobbyValue<System.Collections.Generic.List<LobbyPlayerJoined>> PlayerJoined { get; }
        public Unity.Services.Lobbies.ChangedLobbyValue<System.Collections.Generic.List<int>> PlayerLeft { get; }
        public Unity.Services.Lobbies.ChangedLobbyValue<int> Version { get; }
        public void ApplyToLobby(Models.Lobby lobby);
    }

    public interface ILobbyEvents
    {
        public LobbyEventCallbacks Callbacks { get; }
        public System.Threading.Tasks.Task SubscribeAsync();
        public System.Threading.Tasks.Task UnsubscribeAsync();
    }

    public interface ILobbyService
    {
        public System.Threading.Tasks.Task<Models.Lobby> CreateLobbyAsync(string lobbyName, int maxPlayers, CreateLobbyOptions options = default(CreateLobbyOptions));
        public System.Threading.Tasks.Task<Models.Lobby> CreateOrJoinLobbyAsync(string lobbyId, string lobbyName, int maxPlayers, CreateLobbyOptions options = default(CreateLobbyOptions));
        public System.Threading.Tasks.Task DeleteLobbyAsync(string lobbyId);
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetJoinedLobbiesAsync();
        public System.Threading.Tasks.Task<Models.Lobby> GetLobbyAsync(string lobbyId);
        public System.Threading.Tasks.Task<Models.Lobby> JoinLobbyByCodeAsync(string lobbyCode, JoinLobbyByCodeOptions options = default(JoinLobbyByCodeOptions));
        public System.Threading.Tasks.Task<Models.Lobby> JoinLobbyByIdAsync(string lobbyId, JoinLobbyByIdOptions options = default(JoinLobbyByIdOptions));
        public System.Threading.Tasks.Task<Models.QueryResponse> QueryLobbiesAsync(QueryLobbiesOptions options = default(QueryLobbiesOptions));
        public System.Threading.Tasks.Task<Models.Lobby> QuickJoinLobbyAsync(QuickJoinLobbyOptions options = default(QuickJoinLobbyOptions));
        public System.Threading.Tasks.Task<Models.Lobby> ReconnectToLobbyAsync(string lobbyId);
        public System.Threading.Tasks.Task RemovePlayerAsync(string lobbyId, string playerId);
        public System.Threading.Tasks.Task SendHeartbeatPingAsync(string lobbyId);
        public System.Threading.Tasks.Task<ILobbyEvents> SubscribeToLobbyEventsAsync(string lobbyId, LobbyEventCallbacks callbacks);
        public System.Threading.Tasks.Task<Models.Lobby> UpdateLobbyAsync(string lobbyId, UpdateLobbyOptions options);
        public System.Threading.Tasks.Task<Models.Lobby> UpdatePlayerAsync(string lobbyId, string playerId, UpdatePlayerOptions options);
    }

    public interface ILobbyServiceSDK : ILobbyService
    {
    }

    public interface ILobbyServiceSDKConfiguration
    {
        public void SetBasePath(string basePath);
    }

    public class JoinLobbyByCodeOptions
    {
        public string Password { get; set; }
        public Models.Player Player { get; set; }
        public JoinLobbyByCodeOptions() {}
    }

    public class JoinLobbyByIdOptions
    {
        public string Password { get; set; }
        public Models.Player Player { get; set; }
        public JoinLobbyByIdOptions() {}
    }

    public static class Lobbies
    {
        public static ILobbyServiceSDK Instance { get; }
        public static void SetBasePath(string basePath);
    }

    public enum LobbyEventConnectionState
    {
        Error = 5,
        Subscribed = 3,
        Subscribing = 2,
        Unknown = 0,
        Unsubscribed = 1,
        Unsynced = 4,
    }

    public enum LobbyExceptionReason
    {
        AlreadySubscribedToLobby = 16601,
        AlreadyUnsubscribedFromLobby = 16602,
        BadGateway = 16502,
        BadRequest = 16400,
        Conflict = 16409,
        EntityNotFound = 16404,
        ExpectationFailed = 16417,
        FailedDependency = 16424,
        Forbidden = 16403,
        GatewayTimeout = 16504,
        Gone = 16410,
        HttpVersionNotSupported = 16505,
        IncorrectPassword = 16009,
        InsufficientStorage = 16507,
        InternalServerError = 16500,
        InvalidArgument = 16400,
        InvalidJoinCode = 16010,
        LengthRequired = 16411,
        LobbyAlreadyExists = 16007,
        LobbyConflict = 16003,
        LobbyEventServiceConnectionError = 16604,
        LobbyFull = 16004,
        LobbyLocked = 16005,
        LobbyNotFound = 16001,
        Locked = 16423,
        LoopDetected = 16508,
        MethodNotAllowed = 16405,
        Misdirected = 16421,
        NetworkAuthenticationRequired = 16511,
        NetworkError = 16998,
        NoOpenLobbies = 16006,
        NotAcceptable = 16406,
        NotExtended = 16510,
        NotImplemented = 16501,
        PaymentRequired = 16402,
        PlayerNotFound = 16002,
        PreconditionFailed = 16412,
        PreconditionRequired = 16428,
        ProxyAuthenticationRequired = 16407,
        RangeNotSatisfiable = 16416,
        RateLimited = 16429,
        RequestEntityTooLarge = 16413,
        RequestHeaderFieldsTooLarge = 16431,
        RequestTimeOut = 16408,
        RequestUriTooLong = 16414,
        ServiceUnavailable = 16503,
        SubscriptionToLobbyLostWhileBusy = 16603,
        Teapot = 16418,
        TooEarly = 16425,
        Unauthorized = 16401,
        UnavailableForLegalReasons = 16451,
        Unknown = 16999,
        UnknownErrorCode = 0,
        UnprocessableTransaction = 16422,
        UnsupportedMediaType = 16415,
        UpgradeRequired = 16426,
        ValidationError = 16000,
        VariantAlsoNegotiates = 16506,
    }

    public class LobbyPlayerChanges
    {
        public Unity.Services.Lobbies.ChangedOrRemovedLobbyValue<System.Collections.Generic.Dictionary<string, Unity.Services.Lobbies.ChangedOrRemovedLobbyValue<Models.PlayerDataObject>>> ChangedData { get; }
        public Unity.Services.Lobbies.ChangedLobbyValue<string> ConnectionInfoChanged { get; }
        public Unity.Services.Lobbies.ChangedLobbyValue<System.DateTime> LastUpdatedChanged { get; }
        public int PlayerIndex { get; }
        public LobbyPlayerChanges(int index) {}
    }

    public struct LobbyPlayerJoined
    {
        public Models.Player Player { get; }
        public int PlayerIndex { get; }
        public LobbyPlayerJoined(int index, Models.Player player) {}
    }

    public static class LobbyService
    {
        public static ILobbyService Instance { get; }
    }

    public class LobbyServiceException : Unity.Services.Core.RequestFailedException
    {
        public Models.ErrorStatus ApiError { get; }
        public LobbyExceptionReason Reason { get; }
        public LobbyServiceException(System.Exception innerException) {}
        public LobbyServiceException(long errorCode, string message) {}
        public LobbyServiceException(LobbyExceptionReason reason, string message) {}
        public LobbyServiceException(LobbyExceptionReason reason, string message, System.Exception innerException) {}
    }

    public static class LobbyValue
    {
        public static Unity.Services.Lobbies.ChangedLobbyValue<T> Added<T>(T value);
        public static Unity.Services.Lobbies.ChangedOrRemovedLobbyValue<T> ChangeAdded<T>(T value);
        public static Unity.Services.Lobbies.ChangedLobbyValue<T> Changed<T>(T value);
        public static Unity.Services.Lobbies.ChangedOrRemovedLobbyValue<T> ChangedNotRemoved<T>(T value);
        public static Unity.Services.Lobbies.ChangedOrRemovedLobbyValue<T> Removed<T>();
    }

    public enum LobbyValueChangeType
    {
        Added = 3,
        Changed = 1,
        Removed = 2,
        Unchanged = 0,
    }

    public class QueryLobbiesOptions
    {
        public string ContinuationToken { get; set; }
        public int Count { get; set; }
        public System.Collections.Generic.List<Models.QueryFilter> Filters { get; set; }
        public System.Collections.Generic.List<Models.QueryOrder> Order { get; set; }
        public bool SampleResults { get; set; }
        public int Skip { get; set; }
        public QueryLobbiesOptions() {}
    }

    public class QuickJoinLobbyOptions
    {
        public System.Collections.Generic.List<Models.QueryFilter> Filter { get; set; }
        public Models.Player Player { get; set; }
        public QuickJoinLobbyOptions() {}
    }

    public class UpdateLobbyOptions
    {
        public System.Collections.Generic.Dictionary<string, Models.DataObject> Data { get; set; }
        public string HostId { get; set; }
        public System.Nullable<bool> IsLocked { get; set; }
        public System.Nullable<bool> IsPrivate { get; set; }
        public System.Nullable<int> MaxPlayers { get; set; }
        public string Name { get; set; }
        public string Password { get; set; }
        public UpdateLobbyOptions() {}
    }

    public class UpdatePlayerOptions
    {
        public string AllocationId { get; set; }
        public string ConnectionInfo { get; set; }
        public System.Collections.Generic.Dictionary<string, Models.PlayerDataObject> Data { get; set; }
        public UpdatePlayerOptions() {}
    }
}

namespace Unity.Services.Lobbies.Http
{
    public class DeserializationException : System.Exception
    {
        public DeserializationException() {}
        public DeserializationException(string message) {}
    }

    public class DeserializationSettings
    {
        public MissingMemberHandling MissingMemberHandling = MissingMemberHandling.Error;
        public DeserializationSettings() {}
    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonObjectConverter))] [UnityEngine.Scripting.Preserve] public interface IDeserializable
    {
        public T GetAs<T>(DeserializationSettings deserializationSettings = default(DeserializationSettings));
        public string GetAsString();
    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonObjectConverter))] [UnityEngine.Scripting.Preserve] public class JsonObject : IDeserializable
    {
        public T GetAs<T>();
        public T GetAs<T>(DeserializationSettings deserializationSettings = default(DeserializationSettings));
        public string GetAsString();
        public static System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<IDeserializable>> GetNewJsonObjectResponse(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<object>> o);
        public static System.Collections.Generic.Dictionary<string, IDeserializable> GetNewJsonObjectResponse(System.Collections.Generic.Dictionary<string, object> o);
        public static System.Collections.Generic.List<System.Collections.Generic.List<IDeserializable>> GetNewJsonObjectResponse(System.Collections.Generic.List<System.Collections.Generic.List<object>> o);
        public static System.Collections.Generic.List<IDeserializable> GetNewJsonObjectResponse(System.Collections.Generic.List<object> o);
        public static IDeserializable GetNewJsonObjectResponse(object o);
    }

    [UnityEngine.Scripting.Preserve] public class JsonObjectConverter : Newtonsoft.Json.JsonConverter
    {
        public JsonObjectConverter() {}
        public override bool CanConvert(System.Type objectType);
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer);
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer);
    }

    public enum MissingMemberHandling
    {
        Error = 0,
        Ignore = 1,
    }
}

namespace Unity.Services.Lobbies.Models
{
    [System.Runtime.Serialization.DataContract(Name = @"CreateRequest")] [UnityEngine.Scripting.Preserve] public class CreateRequest
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"data")] [UnityEngine.Scripting.Preserve] public System.Collections.Generic.Dictionary<string, DataObject> Data { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, Name = @"isLocked")] [UnityEngine.Scripting.Preserve] public System.Nullable<bool> IsLocked { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, Name = @"isPrivate")] [UnityEngine.Scripting.Preserve] public System.Nullable<bool> IsPrivate { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"maxPlayers")] [UnityEngine.Scripting.Preserve] public int MaxPlayers { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"name")] [UnityEngine.Scripting.Preserve] public string Name { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"password")] [UnityEngine.Scripting.Preserve] public string Password { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"player")] [UnityEngine.Scripting.Preserve] public Player Player { get; }
        [UnityEngine.Scripting.Preserve] public CreateRequest(string name, int maxPlayers, System.Nullable<bool> isPrivate = False, System.Nullable<bool> isLocked = False, Player player = default(Player), System.Collections.Generic.Dictionary<string, DataObject> data = default(System.Collections.Generic.Dictionary<string, DataObject>), string password = default(string)) {}
    }

    [System.Runtime.Serialization.DataContract(Name = @"DataObject")] [UnityEngine.Scripting.Preserve] public class DataObject
    {
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"index")] [UnityEngine.Scripting.Preserve] public DataObject.IndexOptions Index { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"value")] [UnityEngine.Scripting.Preserve] public string Value { get; }
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"visibility")] [UnityEngine.Scripting.Preserve] public DataObject.VisibilityOptions Visibility { get; }
        [UnityEngine.Scripting.Preserve] public DataObject(DataObject.VisibilityOptions visibility, string value = default(string), DataObject.IndexOptions index = ) {}
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] [UnityEngine.Scripting.Preserve] public enum IndexOptions
        {
            [System.Runtime.Serialization.EnumMember(Value = @"N1")] N1 = 6,
            [System.Runtime.Serialization.EnumMember(Value = @"N2")] N2 = 7,
            [System.Runtime.Serialization.EnumMember(Value = @"N3")] N3 = 8,
            [System.Runtime.Serialization.EnumMember(Value = @"N4")] N4 = 9,
            [System.Runtime.Serialization.EnumMember(Value = @"N5")] N5 = 10,
            [System.Runtime.Serialization.EnumMember(Value = @"S1")] S1 = 1,
            [System.Runtime.Serialization.EnumMember(Value = @"S2")] S2 = 2,
            [System.Runtime.Serialization.EnumMember(Value = @"S3")] S3 = 3,
            [System.Runtime.Serialization.EnumMember(Value = @"S4")] S4 = 4,
            [System.Runtime.Serialization.EnumMember(Value = @"S5")] S5 = 5,
        }
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] [UnityEngine.Scripting.Preserve] public enum VisibilityOptions
        {
            [System.Runtime.Serialization.EnumMember(Value = @"member")] Member = 2,
            [System.Runtime.Serialization.EnumMember(Value = @"private")] Private = 3,
            [System.Runtime.Serialization.EnumMember(Value = @"public")] Public = 1,
        }
    }

    [System.Runtime.Serialization.DataContract(Name = @"Detail")] [UnityEngine.Scripting.Preserve] public class Detail
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"errorType")] [UnityEngine.Scripting.Preserve] public string ErrorType { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"message")] [UnityEngine.Scripting.Preserve] public string Message { get; }
        [UnityEngine.Scripting.Preserve] public Detail(string errorType = default(string), string message = default(string)) {}
    }

    [System.Runtime.Serialization.DataContract(Name = @"ErrorStatus")] [UnityEngine.Scripting.Preserve] public class ErrorStatus
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"code")] [UnityEngine.Scripting.Preserve] public int Code { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"detail")] [UnityEngine.Scripting.Preserve] public string Detail { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"details")] [UnityEngine.Scripting.Preserve] public System.Collections.Generic.List<Detail> Details { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"status")] [UnityEngine.Scripting.Preserve] public int Status { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"title")] [UnityEngine.Scripting.Preserve] public string Title { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"type")] [UnityEngine.Scripting.Preserve] public string Type { get; }
        [UnityEngine.Scripting.Preserve] public ErrorStatus(string type = default(string), int status = 0, string title = default(string), string detail = default(string), int code = 0, System.Collections.Generic.List<Detail> details = default(System.Collections.Generic.List<Detail>)) {}
    }

    public interface IOneOf
    {
        public System.Type Type { get; }
        public object Value { get; }
    }

    [System.Runtime.Serialization.DataContract(Name = @"JoinByCodeRequest")] [UnityEngine.Scripting.Preserve] public class JoinByCodeRequest
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"lobbyCode")] [UnityEngine.Scripting.Preserve] public string LobbyCode { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"password")] [UnityEngine.Scripting.Preserve] public string Password { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"player")] [UnityEngine.Scripting.Preserve] public Player Player { get; }
        [UnityEngine.Scripting.Preserve] public JoinByCodeRequest(string lobbyCode, Player player = default(Player), string password = default(string)) {}
    }

    [System.Runtime.Serialization.DataContract(Name = @"JoinByIdRequest")] [UnityEngine.Scripting.Preserve] public class JoinByIdRequest
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"password")] [UnityEngine.Scripting.Preserve] public string Password { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"player")] [UnityEngine.Scripting.Preserve] public Player Player { get; }
        [UnityEngine.Scripting.Preserve] public JoinByIdRequest(string password = default(string), Player player = default(Player)) {}
    }

    [System.Runtime.Serialization.DataContract(Name = @"Lobby")] [UnityEngine.Scripting.Preserve] public class Lobby
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"availableSlots")] [UnityEngine.Scripting.Preserve] public int AvailableSlots { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"created")] [UnityEngine.Scripting.Preserve] public System.DateTime Created { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"data")] [UnityEngine.Scripting.Preserve] public System.Collections.Generic.Dictionary<string, DataObject> Data { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"environmentId")] [UnityEngine.Scripting.Preserve] public string EnvironmentId { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, Name = @"hasPassword")] [UnityEngine.Scripting.Preserve] public bool HasPassword { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"hostId")] [UnityEngine.Scripting.Preserve] public string HostId { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"id")] [UnityEngine.Scripting.Preserve] public string Id { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, Name = @"isLocked")] [UnityEngine.Scripting.Preserve] public bool IsLocked { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, Name = @"isPrivate")] [UnityEngine.Scripting.Preserve] public bool IsPrivate { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"lastUpdated")] [UnityEngine.Scripting.Preserve] public System.DateTime LastUpdated { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"lobbyCode")] [UnityEngine.Scripting.Preserve] public string LobbyCode { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"maxPlayers")] [UnityEngine.Scripting.Preserve] public int MaxPlayers { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"name")] [UnityEngine.Scripting.Preserve] public string Name { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"players")] [UnityEngine.Scripting.Preserve] public System.Collections.Generic.List<Player> Players { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"upid")] [UnityEngine.Scripting.Preserve] public string Upid { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"version")] [UnityEngine.Scripting.Preserve] public int Version { get; set; }
        [UnityEngine.Scripting.Preserve] public Lobby(string id = default(string), string lobbyCode = default(string), string upid = default(string), string environmentId = default(string), string name = default(string), int maxPlayers = 0, int availableSlots = 0, bool isPrivate = false, bool isLocked = false, System.Collections.Generic.List<Player> players = default(System.Collections.Generic.List<Player>), System.Collections.Generic.Dictionary<string, DataObject> data = default(System.Collections.Generic.Dictionary<string, DataObject>), string hostId = default(string), System.DateTime created = default(System.DateTime), System.DateTime lastUpdated = default(System.DateTime), int version = 0, bool hasPassword = false) {}
    }

    [System.Runtime.Serialization.DataContract(Name = @"Player")] [UnityEngine.Scripting.Preserve] public class Player
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"allocationId")] [UnityEngine.Scripting.Preserve] public string AllocationId { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"connectionInfo")] [UnityEngine.Scripting.Preserve] public string ConnectionInfo { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"data")] [UnityEngine.Scripting.Preserve] public System.Collections.Generic.Dictionary<string, PlayerDataObject> Data { get; set; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"id")] [UnityEngine.Scripting.Preserve] public string Id { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"joined")] [UnityEngine.Scripting.Preserve] public System.DateTime Joined { get; set; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"lastUpdated")] [UnityEngine.Scripting.Preserve] public System.DateTime LastUpdated { get; set; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"profile")] [UnityEngine.Scripting.Preserve] public PlayerProfile Profile { get; set; }
        [UnityEngine.Scripting.Preserve] public Player(string id = default(string), string connectionInfo = default(string), System.Collections.Generic.Dictionary<string, PlayerDataObject> data = default(System.Collections.Generic.Dictionary<string, PlayerDataObject>), string allocationId = default(string), System.DateTime joined = default(System.DateTime), System.DateTime lastUpdated = default(System.DateTime), PlayerProfile profile = default(PlayerProfile)) {}
    }

    [System.Runtime.Serialization.DataContract(Name = @"PlayerDataObject")] [UnityEngine.Scripting.Preserve] public class PlayerDataObject
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"value")] [UnityEngine.Scripting.Preserve] public string Value { get; set; }
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"visibility")] [UnityEngine.Scripting.Preserve] public PlayerDataObject.VisibilityOptions Visibility { get; }
        [UnityEngine.Scripting.Preserve] public PlayerDataObject(PlayerDataObject.VisibilityOptions visibility, string value = default(string)) {}
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] [UnityEngine.Scripting.Preserve] public enum VisibilityOptions
        {
            [System.Runtime.Serialization.EnumMember(Value = @"member")] Member = 2,
            [System.Runtime.Serialization.EnumMember(Value = @"private")] Private = 3,
            [System.Runtime.Serialization.EnumMember(Value = @"public")] Public = 1,
        }
    }

    [System.Runtime.Serialization.DataContract(Name = @"PlayerProfile")] [UnityEngine.Scripting.Preserve] public class PlayerProfile
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"name")] [UnityEngine.Scripting.Preserve] public string Name { get; }
        [UnityEngine.Scripting.Preserve] public PlayerProfile(string name = default(string)) {}
    }

    [System.Runtime.Serialization.DataContract(Name = @"PlayerUpdateRequest")] [UnityEngine.Scripting.Preserve] public class PlayerUpdateRequest
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"allocationId")] [UnityEngine.Scripting.Preserve] public string AllocationId { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"connectionInfo")] [UnityEngine.Scripting.Preserve] public string ConnectionInfo { get; }
        [Newtonsoft.Json.JsonConverter(typeof(Unity.Services.Lobbies.Http.JsonObjectCollectionConverter))] [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"data")] [UnityEngine.Scripting.Preserve] public Unity.Services.Lobbies.Http.JsonObject Data { get; }
        [UnityEngine.Scripting.Preserve] public PlayerUpdateRequest(string connectionInfo = default(string), System.Collections.Generic.Dictionary<string, PlayerDataObject> data = default(System.Collections.Generic.Dictionary<string, PlayerDataObject>), string allocationId = default(string)) {}
    }

    [System.Runtime.Serialization.DataContract(Name = @"QueryFilter")] [UnityEngine.Scripting.Preserve] public class QueryFilter
    {
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"field")] [UnityEngine.Scripting.Preserve] public QueryFilter.FieldOptions Field { get; }
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"op")] [UnityEngine.Scripting.Preserve] public QueryFilter.OpOptions Op { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"value")] [UnityEngine.Scripting.Preserve] public string Value { get; }
        [UnityEngine.Scripting.Preserve] public QueryFilter(QueryFilter.FieldOptions field, string value, QueryFilter.OpOptions op) {}
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] [UnityEngine.Scripting.Preserve] public enum FieldOptions
        {
            [System.Runtime.Serialization.EnumMember(Value = @"AvailableSlots")] AvailableSlots = 2,
            [System.Runtime.Serialization.EnumMember(Value = @"Created")] Created = 4,
            [System.Runtime.Serialization.EnumMember(Value = @"HasPassword")] HasPassword = 17,
            [System.Runtime.Serialization.EnumMember(Value = @"IsLocked")] IsLocked = 16,
            [System.Runtime.Serialization.EnumMember(Value = @"LastUpdated")] LastUpdated = 5,
            [System.Runtime.Serialization.EnumMember(Value = @"MaxPlayers")] MaxPlayers = 1,
            [System.Runtime.Serialization.EnumMember(Value = @"N1")] N1 = 11,
            [System.Runtime.Serialization.EnumMember(Value = @"N2")] N2 = 12,
            [System.Runtime.Serialization.EnumMember(Value = @"N3")] N3 = 13,
            [System.Runtime.Serialization.EnumMember(Value = @"N4")] N4 = 14,
            [System.Runtime.Serialization.EnumMember(Value = @"N5")] N5 = 15,
            [System.Runtime.Serialization.EnumMember(Value = @"Name")] Name = 3,
            [System.Runtime.Serialization.EnumMember(Value = @"S1")] S1 = 6,
            [System.Runtime.Serialization.EnumMember(Value = @"S2")] S2 = 7,
            [System.Runtime.Serialization.EnumMember(Value = @"S3")] S3 = 8,
            [System.Runtime.Serialization.EnumMember(Value = @"S4")] S4 = 9,
            [System.Runtime.Serialization.EnumMember(Value = @"S5")] S5 = 10,
        }
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] [UnityEngine.Scripting.Preserve] public enum OpOptions
        {
            [System.Runtime.Serialization.EnumMember(Value = @"CONTAINS")] CONTAINS = 1,
            [System.Runtime.Serialization.EnumMember(Value = @"EQ")] EQ = 2,
            [System.Runtime.Serialization.EnumMember(Value = @"GE")] GE = 7,
            [System.Runtime.Serialization.EnumMember(Value = @"GT")] GT = 6,
            [System.Runtime.Serialization.EnumMember(Value = @"LE")] LE = 5,
            [System.Runtime.Serialization.EnumMember(Value = @"LT")] LT = 4,
            [System.Runtime.Serialization.EnumMember(Value = @"NE")] NE = 3,
        }
    }

    [System.Runtime.Serialization.DataContract(Name = @"QueryOrder")] [UnityEngine.Scripting.Preserve] public class QueryOrder
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, Name = @"asc")] [UnityEngine.Scripting.Preserve] public bool Asc { get; }
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"field")] [UnityEngine.Scripting.Preserve] public QueryOrder.FieldOptions Field { get; }
        [UnityEngine.Scripting.Preserve] public QueryOrder(bool asc = false, QueryOrder.FieldOptions field = ) {}
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] [UnityEngine.Scripting.Preserve] public enum FieldOptions
        {
            [System.Runtime.Serialization.EnumMember(Value = @"AvailableSlots")] AvailableSlots = 3,
            [System.Runtime.Serialization.EnumMember(Value = @"Created")] Created = 4,
            [System.Runtime.Serialization.EnumMember(Value = @"ID")] ID = 6,
            [System.Runtime.Serialization.EnumMember(Value = @"LastUpdated")] LastUpdated = 5,
            [System.Runtime.Serialization.EnumMember(Value = @"MaxPlayers")] MaxPlayers = 2,
            [System.Runtime.Serialization.EnumMember(Value = @"N1")] N1 = 12,
            [System.Runtime.Serialization.EnumMember(Value = @"N2")] N2 = 13,
            [System.Runtime.Serialization.EnumMember(Value = @"N3")] N3 = 14,
            [System.Runtime.Serialization.EnumMember(Value = @"N4")] N4 = 15,
            [System.Runtime.Serialization.EnumMember(Value = @"N5")] N5 = 16,
            [System.Runtime.Serialization.EnumMember(Value = @"Name")] Name = 1,
            [System.Runtime.Serialization.EnumMember(Value = @"S1")] S1 = 7,
            [System.Runtime.Serialization.EnumMember(Value = @"S2")] S2 = 8,
            [System.Runtime.Serialization.EnumMember(Value = @"S3")] S3 = 9,
            [System.Runtime.Serialization.EnumMember(Value = @"S4")] S4 = 10,
            [System.Runtime.Serialization.EnumMember(Value = @"S5")] S5 = 11,
        }
    }

    [System.Runtime.Serialization.DataContract(Name = @"QueryRequest")] [UnityEngine.Scripting.Preserve] public class QueryRequest
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"continuationToken")] [UnityEngine.Scripting.Preserve] public string ContinuationToken { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"count")] [UnityEngine.Scripting.Preserve] public System.Nullable<int> Count { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"filter")] [UnityEngine.Scripting.Preserve] public System.Collections.Generic.List<QueryFilter> Filter { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"order")] [UnityEngine.Scripting.Preserve] public System.Collections.Generic.List<QueryOrder> Order { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, Name = @"sampleResults")] [UnityEngine.Scripting.Preserve] public bool SampleResults { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"skip")] [UnityEngine.Scripting.Preserve] public System.Nullable<int> Skip { get; }
        [UnityEngine.Scripting.Preserve] public QueryRequest(System.Nullable<int> count = 10, System.Nullable<int> skip = 0, bool sampleResults = false, System.Collections.Generic.List<QueryFilter> filter = default(System.Collections.Generic.List<QueryFilter>), System.Collections.Generic.List<QueryOrder> order = default(System.Collections.Generic.List<QueryOrder>), string continuationToken = default(string)) {}
    }

    [System.Runtime.Serialization.DataContract(Name = @"QueryResponse")] [UnityEngine.Scripting.Preserve] public class QueryResponse
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"continuationToken")] [UnityEngine.Scripting.Preserve] public string ContinuationToken { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"results")] [UnityEngine.Scripting.Preserve] public System.Collections.Generic.List<Lobby> Results { get; }
        [UnityEngine.Scripting.Preserve] public QueryResponse(System.Collections.Generic.List<Lobby> results = default(System.Collections.Generic.List<Lobby>), string continuationToken = default(string)) {}
    }

    [System.Runtime.Serialization.DataContract(Name = @"QuickJoinRequest")] [UnityEngine.Scripting.Preserve] public class QuickJoinRequest
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"filter")] [UnityEngine.Scripting.Preserve] public System.Collections.Generic.List<QueryFilter> Filter { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"player")] [UnityEngine.Scripting.Preserve] public Player Player { get; }
        [UnityEngine.Scripting.Preserve] public QuickJoinRequest(System.Collections.Generic.List<QueryFilter> filter = default(System.Collections.Generic.List<QueryFilter>), Player player = default(Player)) {}
    }

    [System.Runtime.Serialization.DataContract(Name = @"TokenData")] [UnityEngine.Scripting.Preserve] public class TokenData
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"tokenValue")] [UnityEngine.Scripting.Preserve] public string TokenValue { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"uri")] [UnityEngine.Scripting.Preserve] public string Uri { get; }
        [UnityEngine.Scripting.Preserve] public TokenData(string tokenValue = default(string), string uri = default(string)) {}
    }

    [System.Runtime.Serialization.DataContract(Name = @"TokenRequest")] [UnityEngine.Scripting.Preserve] public class TokenRequest
    {
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"tokenType")] [UnityEngine.Scripting.Preserve] public TokenRequest.TokenTypeOptions TokenType { get; }
        [UnityEngine.Scripting.Preserve] public TokenRequest(TokenRequest.TokenTypeOptions tokenType) {}
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] [UnityEngine.Scripting.Preserve] public enum TokenTypeOptions
        {
            [System.Runtime.Serialization.EnumMember(Value = @"vivoxJoin")] VivoxJoin = 1,
            [System.Runtime.Serialization.EnumMember(Value = @"wireJoin")] WireJoin = 2,
        }
    }

    [System.Runtime.Serialization.DataContract(Name = @"UpdateRequest")] [UnityEngine.Scripting.Preserve] public class UpdateRequest
    {
        [Newtonsoft.Json.JsonConverter(typeof(Unity.Services.Lobbies.Http.JsonObjectCollectionConverter))] [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"data")] [UnityEngine.Scripting.Preserve] public Unity.Services.Lobbies.Http.JsonObject Data { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"hostId")] [UnityEngine.Scripting.Preserve] public string HostId { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, Name = @"isLocked")] [UnityEngine.Scripting.Preserve] public System.Nullable<bool> IsLocked { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, Name = @"isPrivate")] [UnityEngine.Scripting.Preserve] public System.Nullable<bool> IsPrivate { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"maxPlayers")] [UnityEngine.Scripting.Preserve] public System.Nullable<int> MaxPlayers { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"name")] [UnityEngine.Scripting.Preserve] public string Name { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, Name = @"password")] [UnityEngine.Scripting.Preserve] public string Password { get; }
        [UnityEngine.Scripting.Preserve] public UpdateRequest(string name = default(string), System.Nullable<int> maxPlayers = default(System.Nullable<int>), System.Nullable<bool> isPrivate = default(System.Nullable<bool>), System.Nullable<bool> isLocked = default(System.Nullable<bool>), System.Collections.Generic.Dictionary<string, DataObject> data = default(System.Collections.Generic.Dictionary<string, DataObject>), string hostId = default(string), string password = default(string)) {}
    }
}

namespace Unity.Services.Lobbies.Scheduler
{
    public static class GameObjectFactory
    {
        public static UnityEngine.GameObject CreateCoreSdkGameObject();
    }

    public abstract class TaskScheduler : UnityEngine.MonoBehaviour
    {
        protected TaskScheduler() {}
        public abstract bool IsMainThread();
        public abstract void ScheduleBackgroundTask(System.Action task);
        public abstract void ScheduleMainThreadTask(System.Action task);
        public void ScheduleOrExecuteOnMain(System.Action action);
    }

    public sealed class TaskSchedulerThreaded : TaskScheduler
    {
        public TaskSchedulerThreaded() {}
        public override bool IsMainThread();
        public override void ScheduleBackgroundTask(System.Action task);
        public override void ScheduleMainThreadTask(System.Action task);
    }

    public sealed class TaskSchedulerWebGL : TaskScheduler
    {
        public TaskSchedulerWebGL() {}
        public override bool IsMainThread();
        public override void ScheduleBackgroundTask(System.Action task);
        public override void ScheduleMainThreadTask(System.Action task);
    }
}
