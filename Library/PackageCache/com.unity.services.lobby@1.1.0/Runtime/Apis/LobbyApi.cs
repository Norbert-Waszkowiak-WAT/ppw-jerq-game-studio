//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System.Threading.Tasks;
using System.Collections.Generic;
using Unity.Services.Lobbies.Models;
using Unity.Services.Lobbies.Http;
using Unity.Services.Authentication.Internal;
using Unity.Services.Lobbies.Lobby;

namespace Unity.Services.Lobbies.Apis.Lobby
{
    /// <summary>
    /// Interface for the LobbyApiClient
    /// </summary>
    internal interface ILobbyApiClient
    {
            /// <summary>
            /// Async Operation.
            /// Bulk update.
            /// </summary>
            /// <param name="request">Request object for BulkUpdateLobby.</param>
            /// <param name="operationConfiguration">Configuration for BulkUpdateLobby.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.Lobby>> BulkUpdateLobbyAsync(Unity.Services.Lobbies.Lobby.BulkUpdateLobbyRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Create a lobby.
            /// </summary>
            /// <param name="request">Request object for CreateLobby.</param>
            /// <param name="operationConfiguration">Configuration for CreateLobby.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.Lobby>> CreateLobbyAsync(Unity.Services.Lobbies.Lobby.CreateLobbyRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Create or join a lobby with lobby ID.
            /// </summary>
            /// <param name="request">Request object for CreateOrJoinLobby.</param>
            /// <param name="operationConfiguration">Configuration for CreateOrJoinLobby.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.Lobby>> CreateOrJoinLobbyAsync(Unity.Services.Lobbies.Lobby.CreateOrJoinLobbyRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Delete a lobby.
            /// </summary>
            /// <param name="request">Request object for DeleteLobby.</param>
            /// <param name="operationConfiguration">Configuration for DeleteLobby.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteLobbyAsync(Unity.Services.Lobbies.Lobby.DeleteLobbyRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get a player/service&#39;s hosted lobbies.
            /// </summary>
            /// <param name="request">Request object for GetHostedLobbies.</param>
            /// <param name="operationConfiguration">Configuration for GetHostedLobbies.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;string&gt; object.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<string>>> GetHostedLobbiesAsync(Unity.Services.Lobbies.Lobby.GetHostedLobbiesRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get a player&#39;s joined lobbies.
            /// </summary>
            /// <param name="request">Request object for GetJoinedLobbies.</param>
            /// <param name="operationConfiguration">Configuration for GetJoinedLobbies.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;string&gt; object.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<string>>> GetJoinedLobbiesAsync(Unity.Services.Lobbies.Lobby.GetJoinedLobbiesRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get lobby details.
            /// </summary>
            /// <param name="request">Request object for GetLobby.</param>
            /// <param name="operationConfiguration">Configuration for GetLobby.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.Lobby>> GetLobbyAsync(Unity.Services.Lobbies.Lobby.GetLobbyRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Heartbeat a lobby.
            /// </summary>
            /// <param name="request">Request object for Heartbeat.</param>
            /// <param name="operationConfiguration">Configuration for Heartbeat.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> HeartbeatAsync(Unity.Services.Lobbies.Lobby.HeartbeatRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Join a lobby with lobby code.
            /// </summary>
            /// <param name="request">Request object for JoinLobbyByCode.</param>
            /// <param name="operationConfiguration">Configuration for JoinLobbyByCode.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.Lobby>> JoinLobbyByCodeAsync(Unity.Services.Lobbies.Lobby.JoinLobbyByCodeRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Join a lobby with lobby ID.
            /// </summary>
            /// <param name="request">Request object for JoinLobbyById.</param>
            /// <param name="operationConfiguration">Configuration for JoinLobbyById.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.Lobby>> JoinLobbyByIdAsync(Unity.Services.Lobbies.Lobby.JoinLobbyByIdRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Query public lobbies.
            /// </summary>
            /// <param name="request">Request object for QueryLobbies.</param>
            /// <param name="operationConfiguration">Configuration for QueryLobbies.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.QueryResponse object.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.QueryResponse>> QueryLobbiesAsync(Unity.Services.Lobbies.Lobby.QueryLobbiesRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Query available lobbies and join a random one.
            /// </summary>
            /// <param name="request">Request object for QuickJoinLobby.</param>
            /// <param name="operationConfiguration">Configuration for QuickJoinLobby.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.Lobby>> QuickJoinLobbyAsync(Unity.Services.Lobbies.Lobby.QuickJoinLobbyRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Reconnect to a lobby after disconnecting.
            /// </summary>
            /// <param name="request">Request object for Reconnect.</param>
            /// <param name="operationConfiguration">Configuration for Reconnect.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.Lobby>> ReconnectAsync(Unity.Services.Lobbies.Lobby.ReconnectRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Remove a player.
            /// </summary>
            /// <param name="request">Request object for RemovePlayer.</param>
            /// <param name="operationConfiguration">Configuration for RemovePlayer.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> RemovePlayerAsync(Unity.Services.Lobbies.Lobby.RemovePlayerRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Authentication token request.
            /// </summary>
            /// <param name="request">Request object for RequestTokens.</param>
            /// <param name="operationConfiguration">Configuration for RequestTokens.</param>
            /// <returns>Task for a Response object containing status code, headers, and Dictionary&lt;string, Models.TokenData&gt; object.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Dictionary<string, Models.TokenData>>> RequestTokensAsync(Unity.Services.Lobbies.Lobby.RequestTokensRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update lobby data.
            /// </summary>
            /// <param name="request">Request object for UpdateLobby.</param>
            /// <param name="operationConfiguration">Configuration for UpdateLobby.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.Lobby>> UpdateLobbyAsync(Unity.Services.Lobbies.Lobby.UpdateLobbyRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update player data.
            /// </summary>
            /// <param name="request">Request object for UpdatePlayer.</param>
            /// <param name="operationConfiguration">Configuration for UpdatePlayer.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
            /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.Lobby>> UpdatePlayerAsync(Unity.Services.Lobbies.Lobby.UpdatePlayerRequest request, Configuration operationConfiguration = null);

    }

    ///<inheritdoc cref="ILobbyApiClient"/>
    internal class LobbyApiClient : BaseApiClient, ILobbyApiClient
    {
        private IAccessToken _accessToken;
        private const int _baseTimeout = 10;
        private Configuration _configuration;
        /// <summary>
        /// Accessor for the client configuration object. This returns a merge
        /// between the current configuration and the global configuration to
        /// ensure the correct combination of headers and a base path (if it is
        /// set) are returned.
        /// </summary>
        public Configuration Configuration
        {
            get {
                // We return a merge between the current configuration and the
                // global configuration to ensure we have the correct
                // combination of headers and a base path (if it is set).
                Configuration globalConfiguration = new Configuration("https://lobby.services.api.unity.com/v1", 10, 4, null);
                return Configuration.MergeConfigurations(_configuration, globalConfiguration);
            }
            set { _configuration = value; }
        }

        /// <summary>
        /// LobbyApiClient Constructor.
        /// </summary>
        /// <param name="httpClient">The HttpClient for LobbyApiClient.</param>
        /// <param name="accessToken">The Authentication token for the client.</param>
        /// <param name="configuration"> LobbyApiClient Configuration object.</param>
        public LobbyApiClient(IHttpClient httpClient,
            IAccessToken accessToken,
            Configuration configuration = null) : base(httpClient)
        {
            // We don't need to worry about the configuration being null at
            // this stage, we will check this in the accessor.
            _configuration = configuration;

            _accessToken = accessToken;
        }


        /// <summary>
        /// Async Operation.
        /// Bulk update.
        /// </summary>
        /// <param name="request">Request object for BulkUpdateLobby.</param>
        /// <param name="operationConfiguration">Configuration for BulkUpdateLobby.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.Lobby>> BulkUpdateLobbyAsync(Unity.Services.Lobbies.Lobby.BulkUpdateLobbyRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.Lobby)   },{"400", typeof(Models.ErrorStatus)   },{"403", typeof(Models.ErrorStatus)   },{"404", typeof(Models.ErrorStatus)   },{"409", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   },{"500", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.Lobby>(response, statusCodeToTypeMap);
            return new Response<Models.Lobby>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Create a lobby.
        /// </summary>
        /// <param name="request">Request object for CreateLobby.</param>
        /// <param name="operationConfiguration">Configuration for CreateLobby.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.Lobby>> CreateLobbyAsync(Unity.Services.Lobbies.Lobby.CreateLobbyRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"201", typeof(Models.Lobby)   },{"400", typeof(Models.ErrorStatus)   },{"403", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   },{"500", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.Lobby>(response, statusCodeToTypeMap);
            return new Response<Models.Lobby>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Create or join a lobby with lobby ID.
        /// </summary>
        /// <param name="request">Request object for CreateOrJoinLobby.</param>
        /// <param name="operationConfiguration">Configuration for CreateOrJoinLobby.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.Lobby>> CreateOrJoinLobbyAsync(Unity.Services.Lobbies.Lobby.CreateOrJoinLobbyRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.Lobby)   },{"201", typeof(Models.Lobby)   },{"400", typeof(Models.ErrorStatus)   },{"403", typeof(Models.ErrorStatus)   },{"404", typeof(Models.ErrorStatus)   },{"409", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   },{"500", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.Lobby>(response, statusCodeToTypeMap);
            return new Response<Models.Lobby>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Delete a lobby.
        /// </summary>
        /// <param name="request">Request object for DeleteLobby.</param>
        /// <param name="operationConfiguration">Configuration for DeleteLobby.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteLobbyAsync(Unity.Services.Lobbies.Lobby.DeleteLobbyRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"400", typeof(Models.ErrorStatus)   },{"403", typeof(Models.ErrorStatus)   },{"404", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   },{"500", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Get a player/service&#39;s hosted lobbies.
        /// </summary>
        /// <param name="request">Request object for GetHostedLobbies.</param>
        /// <param name="operationConfiguration">Configuration for GetHostedLobbies.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;string&gt; object.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<string>>> GetHostedLobbiesAsync(Unity.Services.Lobbies.Lobby.GetHostedLobbiesRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<string>)   },{"400", typeof(Models.ErrorStatus)   },{"403", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   },{"500", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<string>>(response, statusCodeToTypeMap);
            return new Response<List<string>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get a player&#39;s joined lobbies.
        /// </summary>
        /// <param name="request">Request object for GetJoinedLobbies.</param>
        /// <param name="operationConfiguration">Configuration for GetJoinedLobbies.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;string&gt; object.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<string>>> GetJoinedLobbiesAsync(Unity.Services.Lobbies.Lobby.GetJoinedLobbiesRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<string>)   },{"400", typeof(Models.ErrorStatus)   },{"403", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   },{"500", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<string>>(response, statusCodeToTypeMap);
            return new Response<List<string>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get lobby details.
        /// </summary>
        /// <param name="request">Request object for GetLobby.</param>
        /// <param name="operationConfiguration">Configuration for GetLobby.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.Lobby>> GetLobbyAsync(Unity.Services.Lobbies.Lobby.GetLobbyRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.Lobby)   },{"304",  null },{"400", typeof(Models.ErrorStatus)   },{"403", typeof(Models.ErrorStatus)   },{"404", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   },{"500", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.Lobby>(response, statusCodeToTypeMap);
            return new Response<Models.Lobby>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Heartbeat a lobby.
        /// </summary>
        /// <param name="request">Request object for Heartbeat.</param>
        /// <param name="operationConfiguration">Configuration for Heartbeat.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> HeartbeatAsync(Unity.Services.Lobbies.Lobby.HeartbeatRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"400", typeof(Models.ErrorStatus)   },{"403", typeof(Models.ErrorStatus)   },{"404", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   },{"500", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Join a lobby with lobby code.
        /// </summary>
        /// <param name="request">Request object for JoinLobbyByCode.</param>
        /// <param name="operationConfiguration">Configuration for JoinLobbyByCode.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.Lobby>> JoinLobbyByCodeAsync(Unity.Services.Lobbies.Lobby.JoinLobbyByCodeRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.Lobby)   },{"400", typeof(Models.ErrorStatus)   },{"403", typeof(Models.ErrorStatus)   },{"404", typeof(Models.ErrorStatus)   },{"409", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   },{"500", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.Lobby>(response, statusCodeToTypeMap);
            return new Response<Models.Lobby>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Join a lobby with lobby ID.
        /// </summary>
        /// <param name="request">Request object for JoinLobbyById.</param>
        /// <param name="operationConfiguration">Configuration for JoinLobbyById.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.Lobby>> JoinLobbyByIdAsync(Unity.Services.Lobbies.Lobby.JoinLobbyByIdRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.Lobby)   },{"400", typeof(Models.ErrorStatus)   },{"403", typeof(Models.ErrorStatus)   },{"404", typeof(Models.ErrorStatus)   },{"409", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   },{"500", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.Lobby>(response, statusCodeToTypeMap);
            return new Response<Models.Lobby>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Query public lobbies.
        /// </summary>
        /// <param name="request">Request object for QueryLobbies.</param>
        /// <param name="operationConfiguration">Configuration for QueryLobbies.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.QueryResponse object.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.QueryResponse>> QueryLobbiesAsync(Unity.Services.Lobbies.Lobby.QueryLobbiesRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.QueryResponse)   },{"400", typeof(Models.ErrorStatus)   },{"403", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   },{"500", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.QueryResponse>(response, statusCodeToTypeMap);
            return new Response<Models.QueryResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Query available lobbies and join a random one.
        /// </summary>
        /// <param name="request">Request object for QuickJoinLobby.</param>
        /// <param name="operationConfiguration">Configuration for QuickJoinLobby.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.Lobby>> QuickJoinLobbyAsync(Unity.Services.Lobbies.Lobby.QuickJoinLobbyRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.Lobby)   },{"400", typeof(Models.ErrorStatus)   },{"403", typeof(Models.ErrorStatus)   },{"404", typeof(Models.ErrorStatus)   },{"409", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   },{"500", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.Lobby>(response, statusCodeToTypeMap);
            return new Response<Models.Lobby>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Reconnect to a lobby after disconnecting.
        /// </summary>
        /// <param name="request">Request object for Reconnect.</param>
        /// <param name="operationConfiguration">Configuration for Reconnect.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.Lobby>> ReconnectAsync(Unity.Services.Lobbies.Lobby.ReconnectRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.Lobby)   },{"403", typeof(Models.ErrorStatus)   },{"404", typeof(Models.ErrorStatus)   },{"409", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.Lobby>(response, statusCodeToTypeMap);
            return new Response<Models.Lobby>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Remove a player.
        /// </summary>
        /// <param name="request">Request object for RemovePlayer.</param>
        /// <param name="operationConfiguration">Configuration for RemovePlayer.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> RemovePlayerAsync(Unity.Services.Lobbies.Lobby.RemovePlayerRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"400", typeof(Models.ErrorStatus)   },{"403", typeof(Models.ErrorStatus)   },{"404", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   },{"500", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Authentication token request.
        /// </summary>
        /// <param name="request">Request object for RequestTokens.</param>
        /// <param name="operationConfiguration">Configuration for RequestTokens.</param>
        /// <returns>Task for a Response object containing status code, headers, and Dictionary&lt;string, Models.TokenData&gt; object.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Dictionary<string, Models.TokenData>>> RequestTokensAsync(Unity.Services.Lobbies.Lobby.RequestTokensRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Dictionary<string, Models.TokenData>)   },{"400", typeof(Models.ErrorStatus)   },{"403", typeof(Models.ErrorStatus)   },{"404", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   },{"500", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Dictionary<string, Models.TokenData>>(response, statusCodeToTypeMap);
            return new Response<Dictionary<string, Models.TokenData>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update lobby data.
        /// </summary>
        /// <param name="request">Request object for UpdateLobby.</param>
        /// <param name="operationConfiguration">Configuration for UpdateLobby.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.Lobby>> UpdateLobbyAsync(Unity.Services.Lobbies.Lobby.UpdateLobbyRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.Lobby)   },{"400", typeof(Models.ErrorStatus)   },{"403", typeof(Models.ErrorStatus)   },{"404", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   },{"500", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.Lobby>(response, statusCodeToTypeMap);
            return new Response<Models.Lobby>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update player data.
        /// </summary>
        /// <param name="request">Request object for UpdatePlayer.</param>
        /// <param name="operationConfiguration">Configuration for UpdatePlayer.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.Lobby object.</returns>
        /// <exception cref="Unity.Services.Lobbies.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.Lobby>> UpdatePlayerAsync(Unity.Services.Lobbies.Lobby.UpdatePlayerRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.Lobby)   },{"400", typeof(Models.ErrorStatus)   },{"403", typeof(Models.ErrorStatus)   },{"404", typeof(Models.ErrorStatus)   },{"429", typeof(Models.ErrorStatus)   },{"500", typeof(Models.ErrorStatus)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.Lobby>(response, statusCodeToTypeMap);
            return new Response<Models.Lobby>(response, handledResponse);
        }

    }
}
