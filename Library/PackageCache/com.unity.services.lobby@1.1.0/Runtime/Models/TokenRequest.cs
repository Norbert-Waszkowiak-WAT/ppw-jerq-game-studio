//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Lobbies.Http;



namespace Unity.Services.Lobbies.Models
{
    /// <summary>
    /// Details about a token being requested.
    /// </summary>
    [Preserve]
    [DataContract(Name = "TokenRequest")]
    public class TokenRequest
    {
        /// <summary>
        /// Details about a token being requested.
        /// </summary>
        /// <param name="tokenType">tokenType param</param>
        [Preserve]
        public TokenRequest(TokenTypeOptions tokenType)
        {
            TokenType = tokenType;
        }

        /// <summary>
        /// Parameter tokenType of TokenRequest
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "tokenType", IsRequired = true, EmitDefaultValue = true)]
        public TokenTypeOptions TokenType{ get; }
    
        /// <summary>
        /// Defines TokenType
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TokenTypeOptions
        {
            /// <summary>
            /// Enum VivoxJoin for value: vivoxJoin
            /// </summary>
            [EnumMember(Value = "vivoxJoin")]
            VivoxJoin = 1,
            /// <summary>
            /// Enum WireJoin for value: wireJoin
            /// </summary>
            [EnumMember(Value = "wireJoin")]
            WireJoin = 2
        }

        /// <summary>
        /// Formats a TokenRequest into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "tokenType," + TokenType;
            return serializedModel;
        }

        /// <summary>
        /// Returns a TokenRequest as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var tokenTypeStringValue = TokenType.ToString();
            dictionary.Add("tokenType", tokenTypeStringValue);
            
            return dictionary;
        }
    }
}
