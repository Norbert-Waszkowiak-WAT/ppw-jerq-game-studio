//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Lobbies.Http;



namespace Unity.Services.Lobbies.Models
{
    /// <summary>
    /// The body of a Join request
    /// </summary>
    [Preserve]
    [DataContract(Name = "JoinByIdRequest")]
    public class JoinByIdRequest
    {
        /// <summary>
        /// The body of a Join request
        /// </summary>
        /// <param name="password">The password to the target lobby. If target lobby HasPassword is true, this password must match or the request is denied.</param>
        /// <param name="player">player param</param>
        [Preserve]
        public JoinByIdRequest(string password = default, Player player = default)
        {
            Password = password;
            Player = player;
        }

        /// <summary>
        /// The password to the target lobby. If target lobby HasPassword is true, this password must match or the request is denied.
        /// </summary>
        [Preserve]
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password{ get; }
        
        /// <summary>
        /// Parameter player of JoinByIdRequest
        /// </summary>
        [Preserve]
        [DataMember(Name = "player", EmitDefaultValue = false)]
        public Player Player{ get; }
    
        /// <summary>
        /// Formats a JoinByIdRequest into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Password != null)
            {
                serializedModel += "password," + Password + ",";
            }
            if (Player != null)
            {
                serializedModel += "player," + Player.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a JoinByIdRequest as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Password != null)
            {
                var passwordStringValue = Password.ToString();
                dictionary.Add("password", passwordStringValue);
            }
            
            return dictionary;
        }
    }
}
