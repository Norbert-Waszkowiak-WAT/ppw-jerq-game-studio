//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Lobbies.Http;



namespace Unity.Services.Lobbies.Models
{
    /// <summary>
    /// Custom data property for a player.
    /// </summary>
    [Preserve]
    [DataContract(Name = "PlayerDataObject")]
    public class PlayerDataObject
    {
        /// <summary>
        /// Custom data property for a player.
        /// </summary>
        /// <param name="visibility">Indicates for whom the property should be visible.  If &#x60;public&#x60;, the property will be visible to everyone and will be included in query results.  If &#x60;member&#x60;, the data will only be visible to users who are members of the lobby (i.e. those who have successfully joined).  If &#x60;private&#x60;, the metadata will only be visible to the player.</param>
        /// <param name="value">The value of the custom property.  This property can be set to null or an empty string.</param>
        [Preserve]
        public PlayerDataObject(VisibilityOptions visibility, string value = default)
        {
            Value = value;
            Visibility = visibility;
        }

        /// <summary>
        /// The value of the custom property.  This property can be set to null or an empty string.
        /// </summary>
        [Preserve]
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value{ get; set; }
        
        /// <summary>
        /// Indicates for whom the property should be visible.  If &#x60;public&#x60;, the property will be visible to everyone and will be included in query results.  If &#x60;member&#x60;, the data will only be visible to users who are members of the lobby (i.e. those who have successfully joined).  If &#x60;private&#x60;, the metadata will only be visible to the player.
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "visibility", IsRequired = true, EmitDefaultValue = true)]
        public VisibilityOptions Visibility{ get; internal set; }
    
        /// <summary>
        /// Indicates for whom the property should be visible.  If &#x60;public&#x60;, the property will be visible to everyone and will be included in query results.  If &#x60;member&#x60;, the data will only be visible to users who are members of the lobby (i.e. those who have successfully joined).  If &#x60;private&#x60;, the metadata will only be visible to the player.
        /// </summary>
        /// <value>Indicates for whom the property should be visible.  If &#x60;public&#x60;, the property will be visible to everyone and will be included in query results.  If &#x60;member&#x60;, the data will only be visible to users who are members of the lobby (i.e. those who have successfully joined).  If &#x60;private&#x60;, the metadata will only be visible to the player.</value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VisibilityOptions
        {
            /// <summary>
            /// Enum Public for value: public
            /// </summary>
            [EnumMember(Value = "public")]
            Public = 1,
            /// <summary>
            /// Enum Member for value: member
            /// </summary>
            [EnumMember(Value = "member")]
            Member = 2,
            /// <summary>
            /// Enum Private for value: private
            /// </summary>
            [EnumMember(Value = "private")]
            Private = 3
        }

        /// <summary>
        /// Formats a PlayerDataObject into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Value != null)
            {
                serializedModel += "value," + Value + ",";
            }
            serializedModel += "visibility," + Visibility;
            return serializedModel;
        }

        /// <summary>
        /// Returns a PlayerDataObject as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Value != null)
            {
                var valueStringValue = Value.ToString();
                dictionary.Add("value", valueStringValue);
            }
            
            var visibilityStringValue = Visibility.ToString();
            dictionary.Add("visibility", visibilityStringValue);
            
            return dictionary;
        }
    }
}
